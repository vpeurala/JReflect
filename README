Simple and easy reflection API wrapper for Java in fluent interface style.

No annotations needed.

TODO:
-----
+ Exceptions from incorrect usage
+ Strings as args like objects and classes, to enable invocation without compile-time dependency
+ Invoking varargs methods & constructors

DONE:
-----
+ Getting and setting instance fields with and without inheritance
+ Getting and setting static fields with and without inheritance
+ Invoking instance methods with and without inheritance
+ Invoking static methods with and without inheritance
+ Invoking constructors
+ Passing and wrapping exceptions thrown by invoked methods & constructors

BUBBLING UNDER:
---------------
+ Annotations?
+ Generics?
+ Mass lookups & invocations of fields, methods and constructors? (foreach-style?)
